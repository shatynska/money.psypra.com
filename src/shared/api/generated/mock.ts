/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from 'msw';
import { faker } from '@faker-js/faker';

faker.seed(1);

const baseURL = 'https://dro.psypra.com';
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/api/users/:idOrEmail`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersControllerFindOne200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/api/users/:id`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/users`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersControllerMe200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/api/users`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersControllerUpdateUser200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/cash-books/cash-balance`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(getCashBooksControllerGetCashBalance200Response()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/cash-books/current`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/auth/register`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json(getAuthControllerRegister201Response())],
      [ctx.status(400), ctx.json(getAuthControllerRegister400Response())],
      [ctx.status(409), ctx.json(getAuthControllerRegister409Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/auth/login`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json(getAuthControllerLogin201Response())],
      [ctx.status(400), ctx.json(getAuthControllerLogin400Response())],
      [ctx.status(401), ctx.json(getAuthControllerLogin401Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/auth/logout`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/auth/refresh-tokens`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/auth/google`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/auth/google/callback`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/auth/success-google`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

export function getUsersControllerFindOne200Response() {
  return {
    id: "'0c287617-9f36-489e-ba72-d462777987e9'",
    email: 'test@gmail.com',
    roles: ['USER'],
  };
}

export function getUsersControllerMe200Response() {
  return {};
}

export function getUsersControllerUpdateUser200Response() {
  return {
    id: "'0c287617-9f36-489e-ba72-d462777987e9'",
    email: 'test@gmail.com',
    roles: ['USER'],
  };
}

export function getCashBooksControllerGetCashBalance200Response() {
  return {
    value: '5600',
  };
}

export function getAuthControllerRegister201Response() {
  return {
    id: "'0c287617-9f36-489e-ba72-d462777987e9'",
    email: 'test@gmail.com',
    roles: ['USER'],
  };
}

export function getAuthControllerRegister400Response() {
  return null;
}

export function getAuthControllerRegister409Response() {
  return null;
}

export function getAuthControllerLogin201Response() {
  return {
    accessToken:
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjBjMjg3NjE3LTlmMzYtNDg5ZS1iYTcyLWQ0NjI3Nzc5ODdlOSIsImVtYWlsIjoidGVzdEBnbWFpbC5jb20iLCJyb2xlcyI6WyJVU0VSIiwiQURNSU4iXSwiaWF0IjoxNjk1OTI4NTc5LCJleHAiOjE2OTYwMTQ5Nzl9.VblvTacY29lbiE_IZl2bb6itQ8mCsgf4TZrk2bmdXnU',
  };
}

export function getAuthControllerLogin400Response() {
  return null;
}

export function getAuthControllerLogin401Response() {
  return null;
}

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
